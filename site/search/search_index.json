{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<p> Welcome to the Virginia Tech Sailbot and PEP Documentation!</p>","text":"<p>This document will outline how to set up the software stack on theoretically any modern computer. For more information on how to run simulations, testing, and how to run this code on the jetson, please refer to the other docs.</p> <p></p>"},{"location":"#what-is-the-purpose-of-this-document","title":"<p> What Is the Purpose of This Document? </p>","text":"<p>The purpose of this document is to be an installation guide, overview of all of the technologies that we use, a description of how the software works, and a guide to how to use the software all in one! This is basically, in professional terms, an ICD, and the upkeep of this document is of paramount importance as this is the best and most efficient way to facilitate knowledge transfer between senior members of the club and newer members.</p> <p></p>"},{"location":"#how-do-i-get-started","title":"<p> How Do I Get Started? </p>","text":"<p>Head over to the Getting Started part of the documentation and complete the installation steps over at Installing Docker to install Docker. Then, complete the installation steps found in Setting Up the Development Container, and once you have the development container all set up, you should be ready to test everything! To get a simple simulation scenario up and running, then please visit Examples. </p> <p></p>"},{"location":"#what-frameworks-should-i-learn","title":"<p> What Frameworks Should I Learn? </p>","text":"<p>ROS2: Our techstack utilizes ROS2 (The Robotics Operating System) at its core. Unlike its name implies, it is not an actual operating system, but rather a middleware wrapper that makes concurrency and communication between sensor, actuators, autopilots, and telemetry super easy! This is the industry standard for projects just like this one so if you ever want to do anything in robotics, then this is the framework to learn! The specific version we are using is ROS2 Humble Hawksbill or ROS2 Humble for short, and the documentation for it can be found right here: ROS2 Humble Documentation. Specifically, I would recommend heading to the Tutorials and Concepts sections as those are the most useful for beginners. In addition, there is a really good video series outlining how to get started and do stuff with ROS in addition to the concepts, which can be found here: ROS2 Tutorial Series EP1.</p> <p>Docker: While this isn't much of a framework, it is still an important tool and understanding how it works and the concepts behind it, will make troubleshooting if you ever run into problems a bit easier. Docker is seen pretty much everywhere in software nowadays because its a super streamlined and fast way to create custom virtual machines. It really doesn't matter which part of the software industry you would like to work in in the future, I guarantee you that you will run into docker into some point. So it's better to learn it sooner rather than later! Heres some links to documentation and videos - Docker Overview - Docker Video Explanation 1 - Docker Video Explanation 2  It turns out that Docker can be used for more than just deployment though. Relatively recently, Docker introduced full support for something called Docker Development Environments (Or Docker Development Containers), which allows us to do all of our development through a Docker container right inside VSCode! Thats great because getting ROS2 and our entire project working on everyone's computers and operating systems was a nightmare to orchestrate and setup, now everyone can just install Docker and our custom development container and start developing instantly! Additionally, there are plenty of other IDEs that support integration with development containers in case you use something other than VSCode; however, VSCode is what we will focus on in this document's setup instructions.</p>"},{"location":"getting_started/installing_docker/","title":"Installing Docker","text":"<p>NOTE: If You Meet Dificulties Installing Docker</p> <p>Ensure that you meet the docker's system requirements listed on their documentation, if not then attempt to contact an officer or look through the docker documentation for what to do if you do not meet the system requirements. Heres the link to the Docker documentation Docker Documentation</p>"},{"location":"getting_started/installing_docker/#installing-docker-on-windows","title":"<p> Installing Docker on Windows </p>","text":"<p>In order to install Docker on windows, first we must install WSL (Windows Subsystem in Linux).</p> <p>Open the command prompt with administrator privileges and type the following commands <pre><code>wsl.exe --install -d Ubuntu-22.04\n</code></pre> <pre><code>wsl --set-default Ubuntu-22.04\n</code></pre> Enter your user info to complete the installation  </p> <p>With these steps, this will have installed WSL and Ubuntu 22.04. Docker requires Ubuntu WSL to work on Windows.  For more information see the official WSL documentation:  Official WSL Documentation</p> <p>Next, we must install the docker desktop application and connect it up to WSL.</p> <p>The following link contains the download link for docker desktop on windows.  Follow the download instructions, and when you are done, you should have docker installed! Docker Desktop for Windows Install Page</p> <p></p>"},{"location":"getting_started/installing_docker/#installing-docker-on-ubuntu-linux","title":"<p> Installing Docker on Ubuntu Linux </p>","text":"<p>Please type the following sets of commands in a terminal. <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre> <pre><code># Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> <p></p>"},{"location":"getting_started/installing_docker/#installing-docker-on-mac-os","title":"<p> Installing Docker on Mac OS</p>","text":"<p>Please follow the official docker installation instructions as I am not too familiar with Mac computers. However if you own a Mac and would like to contribute to the documentation by writing up explicit installation instructions for Mac, please feel free. Official Docker Installation Instruction Mac</p> <p></p>"},{"location":"getting_started/installing_docker/#installing-docker-on-other-operating-systems","title":"<p> Installing Docker on Other Operating Systems </p>","text":"<p>Documentation for the rest of the operating systems docker supports can be found here: Official Docker Installation Instructions for Every OS.</p>"},{"location":"getting_started/setting_up_dev_environment/","title":"<p> Before Setting Up the Dev Environment </p>","text":"<p>Make sure that you have installed docker before doing this step. The following steps will not work if docker is not installed on your machine. The easiest way to check whether docker is installed correctly, open a terminal and</p> <p>Also ensure that you </p>"},{"location":"getting_started/setting_up_dev_environment/#installing-the-development-container","title":"<p> Installing the Development Container </p>","text":"<p>Clone the git repo Install Dev container extension Build and enter dev container for the repo</p>"},{"location":"getting_started/setting_up_dev_environment/#final-setup-after-loading-development-container","title":"<p> Final Setup after Loading Development Container </p>","text":"<p>Once you are inside your development container, go to the terminal and input the following commands. <pre><code>cd src &amp;&amp; bash setup.sh\n</code></pre> <pre><code>source ~/.bashrc\n</code></pre> Restart VSCode by closing it and reopening it to make sure all of the changes refresh properly  </p>"},{"location":"getting_started/setting_up_dev_environment/#connecting-back-to-the-dev-container","title":"<p> Connecting Back to The Dev Container </p>","text":"<p>If you would like to close the container and resume development on it some other time then heres how you do that. First, open a VSCode window and click on the search bar at the very top. Instead of searching like you would normally, instead type <code>&gt;open folder in container</code>. Remember to include the \"&gt;\" as thats what allows your VSCode search bar to run commands. Once you do that you should get a popup that looks something like this  Click on Dev Containers: Open Folder in Container. This should navigate you to a file explorer. Using it, simply navigate to the folder that you cloned the github repo into and you should be back to your development container.</p> <p>TODO: this would change if we want to make the base of the github repo the workspace instead of the src folder because you wouldn't use the folder that you cloned the github repo into </p>"},{"location":"getting_started/what_did_you_just_install/","title":"What Did You Just Install?","text":""},{"location":"getting_started/what_did_you_just_install/#_1","title":"What Did You Just Install?","text":""},{"location":"getting_started/what_did_you_just_install/#what-is-a-development-container-and-why-are-we-using-one","title":"What is a Development Container and Why are We Using One?","text":"<p>A development container is a virtualized environment where you can skip setup and not worry about operating system specific software. Some of the software that we use only works on certain versions on Ubuntu and is really hard to get your hands on with other operating systems. There are also a lot of packages that this project relies on, which can be a pain to manually install, so docker development containers automate that process and allow you to start developing instantely. Additionally this helps automate and streamline deployment on the Nvidia Jetson microprocessor.</p>"},{"location":"misc/known_issues/","title":"Known Issues:","text":"<ul> <li>In order to get full intellisense, you need to restart the dev container after building it. Idk how to fix this man but just go with it</li> </ul>"},{"location":"misc/potential_security_risks/","title":"Heres where I put potential security risks which don't matter at all right now but may matter in the future.","text":"<p>In the future though if we ever want to open source this and release it as a tool for others to use or a product, this would be where to start. - dev container uses docker.sock which needs to have permissions granted to it. So I just do it through ~/.bashrc - <code>sailbot_user ALL=(ALL) NOPASSWD: chmod</code> is appended to /etc/sudoers when building the image. This is not the safest lol</p> <p>Please contact chris (animated__ through discord) if you want to change these things but don't know if we are at a stage where you should/ how to do it</p>"},{"location":"misc/todo/","title":"<p> TODO </p>","text":"<p>We use todoist to manage all of our current projects and planning.  If you would like to see what we are currently working on then please visit the following link</p>"},{"location":"misc/todo/#add-the-following-aliases-if-they-help","title":"Add the following aliases if they help:","text":"<ul> <li>alias python=python3</li> <li>alias 'colcon build'='cd /home/src &amp;&amp; colcon build'</li> </ul>"},{"location":"nodes/autopilot/","title":"<p> Autopilot </p>","text":""},{"location":"nodes/autopilot/#summary","title":"Summary","text":"<p>This node is responsible for listening to data about the current state of the boat and a set of waypoints and publishing the desired rudder and sail angles based on our autopilot software. This node runs completely asynchronously on an internal timer, which means that a few times every seconds it runs a non-blocking script to calculate what the desired rudder and sail angles should be and publishes them when its done.</p> <p>Additionally, this node publishes data that is useful for telemetry and debugging such as the the current maneuver it is attempting to perform and what its desired heading is currently.</p> <p>In order for us to be able to control and tune parameters for the autopilot from the groundstation, this node also listens for autopilot_parameters. These are jsons (serialized as strings) which detail all of the new parameters and what their values should be. These values are sent from the groundstation to the telemetry server, then to the telemetry node and then finally to the autopilot.</p> <p>An important thing to note is that this node also controls basic RC override, which is why it needs to listen into the raw RC data.</p> <p>TODO: There are various modes related to RC override that the autopilot can \"switch into\". Depending </p> <p></p>"},{"location":"nodes/autopilot/#the-autopilot-parameters-system","title":"The Autopilot Parameters System","text":""},{"location":"nodes/autopilot/#command-to-run-the-node","title":"Command to Run the Node","text":"<pre><code>ros2 run autopilot autopilot\n</code></pre>"},{"location":"nodes/autopilot/#listens-to-the-following-topics","title":"Listens to the Following Topics","text":"<ul> <li>/position (NavSatFix from sensor_msgs)</li> <li>/velocity (Twist from geometry_msgs)</li> <li>/heading (Float32 from std_msgs)</li> <li>/apparent_wind_vector (Vector3 from geometry_msgs)</li> <li>/autopilot_parameters (String from std_msgs)</li> <li>/rc_data (RCData from sailbot_msgs)</li> <li>/autopilot_mode (String from std_msgs)</li> <li>/waypoints_list (WaypointList from sailbot_msgs)</li> </ul>"},{"location":"nodes/autopilot/#publishes-to-the-following-topics","title":"Publishes to the Following Topics","text":""}]}